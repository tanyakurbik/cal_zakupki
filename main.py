"""
This is a echo bot.
It echoes any incoming text messages.
"""
import datetime
import logging

import yaml
from aiogram import Bot, Dispatcher, executor, types

from modules.calculations import (
    e_store,
    auction_ogz,
    contest_kgz,
    contest_ogz,
    auction_kgz,
)

CONFIG = yaml.load(open("config.yaml"), Loader=yaml.FullLoader)
API_TOKEN = CONFIG["api_token"]

WELCOME_MSG = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–Ø *–ö—É–ó—è* (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫—É–ø–æ–∫). –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ 
–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–∞ –∑–∞–∫—É–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –¥–∞—Ç—É –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –û–ì–ó.

*–°–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ –∑–∞–∫—É–ø–æ–∫*
1. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω (–ù–ú–¶–ö –¥–æ 600 —Ç—ã—Å. —Ä—É–±.)
2. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω —á–µ—Ä–µ–∑ –û–ì–ó ( –ù–ú–¶–ö –¥–æ 3 –º–ª–Ω. —Ä—É–±.)
3. –û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ —á–µ—Ä–µ–∑ –û–ì–ó (–ù–ú–¶–ö –¥–æ 3 –º–ª–Ω. —Ä—É–±.)
4. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω —á–µ—Ä–µ–∑ –ö–ì–ó (–ù–ú–¶–ö —Å–≤—ã—à–µ 3 –º–ª–Ω. —Ä—É–±.)
5. –û—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω–∫—É—Ä—Å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ —á–µ—Ä–µ–∑ –ö–ì–ó (–ù–ú–¶–ö —Å–≤—ã—à–µ 3 –º–ª–Ω. —Ä—É–±.)

*–ü—Ä–∏–º–µ—Ä*
```
3 08.03.2021
```
"""

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher

DP = Dispatcher(Bot(token=API_TOKEN))


def beautify_dict(data: dict[str, datetime.date]):
    return "\n".join(
        [f"*{k}*\n{v.day:02}.{v.month:02}.{v.year}\n" for (k, v) in data.items()]
    )


@DP.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply(WELCOME_MSG, parse_mode="markdown")


@DP.message_handler()
async def echo(message: types.Message):
    user_input = message.text
    try:
        procedure_number_raw, start_date_raw = user_input.split(" ")
        procedure_number = int(procedure_number_raw)
        day, month, year = map(int, start_date_raw.split("."))
        start_date = datetime.date(year, month, day)
    except ValueError:
        if "—Ç—ã" in user_input.lower():
            await message.answer(f"–ù–µ—Ç {user_input.lower()} üòú")
        else:
            await message.answer("–ö—É–ó—è –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª üò•")
        raise
    if procedure_number == 1:
        result = e_store(start_date)
    elif procedure_number == 2:
        result = auction_ogz(start_date)
    elif procedure_number == 3:
        result = contest_ogz(start_date)
    elif procedure_number == 4:
        result = auction_kgz(start_date)
    elif procedure_number == 5:
        result = contest_kgz(start_date)
    else:
        result = None
        await message.answer("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞!")
    await message.answer(beautify_dict(result), parse_mode="markdown")


if __name__ == "__main__":
    executor.start_polling(DP, skip_updates=True)
